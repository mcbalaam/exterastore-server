generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             String        @id @default(uuid())
  username       String        @unique
  email          String
  title          String?
  timeoutDue     Int?
  profilePicture String
  isSupporter    Boolean
  passwordHash   String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  preferences    Json?
  
  stars          pluginStars[]
}

model exteraPlugin {
  id             String          @id @default(uuid())
  name           String
  description    String?
  forkOriginId   String?
  reactions      Json            @default("{}")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  targetPlatform String[]
  tags           Json            @default("{}")
  
  releases       pluginRelease[]
  stars          pluginStars[]
  forkOrigin     exteraPlugin?   @relation("PluginFork", fields: [forkOriginId], references: [id])
  forks          exteraPlugin[]  @relation("PluginFork")
}

model pluginRelease {
  id           String       @id @default(uuid())
  releaseNotes String?
  file         String
  pluginId     String
  reactions    Json         @default("{}")
  downloads    Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  releaseHash  String       @unique
  
  plugin       exteraPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
}

model pluginStars {
  userId   String
  pluginId String
  
  user     user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  plugin   exteraPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  
  @@id([userId, pluginId])
}
